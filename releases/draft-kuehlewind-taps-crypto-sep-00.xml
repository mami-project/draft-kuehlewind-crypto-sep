<?xml version="1.0" encoding="UTF-8"?>
  <?xml-stylesheet type="text/xsl" href="rfc2629.xslt" ?>
  <!-- generated by https://github.com/cabo/kramdown-rfc2629 version 1.2.3 -->

<!DOCTYPE rfc SYSTEM "rfc2629.dtd" [
]>

<?rfc toc="yes"?>
<?rfc sortrefs="yes"?>
<?rfc symrefs="yes"?>

<rfc ipr="trust200902" docName="draft-kuehlewind-taps-crypto-sep-00" category="info">

  <front>
    <title abbrev="crypto separation">Separating Crypto Negotiation and Communication</title>

    <author initials="M." surname="Kuehlewind" fullname="Mirja Kuehlewind">
      <organization>ETH Zurich</organization>
      <address>
        <postal>
          <street>Gloriastrasse 35</street>
          <city>8092 Zurich</city>
          <country>Switzerland</country>
        </postal>
        <email>mirja.kuehlewind@tik.ee.ethz.ch</email>
      </address>
    </author>
    <author initials="T." surname="Pauly" fullname="Tommy Pauly">
      <organization>Apple Inc.</organization>
      <address>
        <postal>
          <street>1 Infinite Loop</street>
          <city>Cupertino, California 95014</city>
          <country>United States of America</country>
        </postal>
        <email>tpauly@apple.com</email>
      </address>
    </author>
    <author initials="C.A." surname="Wood" fullname="Christopher A. Wood">
      <organization>Apple Inc.</organization>
      <address>
        <postal>
          <street>1 Infinite Loop</street>
          <city>Cupertino, California 95014</city>
          <country>United States of America</country>
        </postal>
        <email>cawood@apple.com</email>
      </address>
    </author>

    <date year="2017" month="July" day="03"/>

    
    
    <keyword>Internet-Draft</keyword>

    <abstract>


<t>Due to the latency involved in connection setup and security handshakes, there is an increasing
deployment of cryptographic session resumption mechanisms. While cryptographic context and
endpoint capabilities need to be be known before encrypted application data can be sent, there is
otherwise no technical constraint that the crypto handshake must be performed on the same transport
connection. This document recommends a logical separation between the mechanism(s) used to negotiate
capabilities and set up encryption context (handshake protocol), the application of encryption and
authentication state to data (record protocol), and the associated transport connection(s).</t>



    </abstract>


  </front>

  <middle>


<section anchor="introduction" title="Introduction">

<t>Secure transport protocols are generally composed of three pieces:</t>

<t><list style="numbers">
  <t>A transport protocol to control the transfer of data.</t>
  <t>A record protocol to frame, encrypt and/or authenticate data</t>
  <t>A handshake protocol to negotiate cryptographic secrets.</t>
</list></t>

<t>For ease of deployment and standardization, among other reasons, these constituents are often tightly
coupled. For example, in TLS <xref target="RFC5246"/>, the handshake protocol depends on the record protocol,
and vice versa. However, more recent transport protocols such as QUIC <xref target="I-D.ietf-quic-tls"/> keep
these pieces separate. QUIC uses TLS to negotiate secrets, and <spanx style="emph">exports</spanx> those secrets
to encrypt packets directly. See <xref target="TransportSecuritySurvey"/> for a survey of other
secure transport protocols.</t>

<t>Separating these pieces is important, as new secure transport protocols increasingly rely on
session resumption mechanisms where cryptographic context can be resumed to transmit
application data with the first packet without delay for connection setup and negotiation.
In the case where there is no cryptographic context available when an application
expresses the need to transmit data to a certain endpoint, it must first run the handshake protocol
on a transport connection before being able to transmit application data. If the handshake protocol can
be separated from the other components, then it can use another transport connection to
establish secrets without blocking the application’s main transport connection. This also opens up
the possibility to run the handshake protocol well in advance of the need to send application data,
to avoid unnecessary delays. For example, a client system could maintain a database of endpoints it
is likely to communicate with, and establish keying material with a handshake protocol at periodic
intervals to ensure fresh keys for new transport connections.</t>

<t><xref target="I-D.moskowitz-sse"/> proposes a similar approach. However while <xref target="I-D.moskowitz-sse"/> proposes
a new protocol to negotiate and maintain long-term cryptographic sessions,
this document relies on the use of existing protocols and only discusses requirements for the evolution
of these protocols and exchange of information within one endpoint locally.</t>

</section>
<section anchor="terminology" title="Terminology">

<t><list style="symbols">
  <t>Transport Protocol: A protocol that can transport messages between two endpoints. This may represent the service offered to applications to allow them to send and receive data before encryption; and also represent the protocol that can transmit handshake data and encrypted records.</t>
  <t>Handshake Protocol: A protocol that can validate and authenticate endpoints, encrypt and authenticate its negotiation, and ultimately generate keying material.</t>
  <t>Record Protocol: A protocol that can use keying material to transform messages. A record will generally add a frame around application data, and authenticate and/or encrypt the data.</t>
  <t>Keying Material: One or more pre-shared keys that can be used to encrypt and authenticate data, generated by a handshake protocol and used by a record protocol.</t>
</list></t>

</section>
<section anchor="protocol-interfaces" title="Protocol Interfaces">

<t>In traditional models in which the protocols are not separated out into the three elements of handshake,
record, and transport protocols, there are two basic approaches to the interactions:</t>

<t><list style="numbers">
  <t>The transport protocol provides data to the security protocol and gets back an encrypted version of
the data to be sent (handshake and record protocols are combined)</t>
  <t>The security protocol provides keying material to the transport protocol, and the transport protocol is
responsible for encrypting data (transport and record protocols are combined)</t>
</list></t>

<t>By teasing apart all three portions as separate protocols, there end up being six interface points:</t>

<figure title="Secure Transport Protocol Components and Interactions" anchor="fig-dependencies"><artwork><![CDATA[
Application Data
     |    ^
     |    |
+----V----+-----+      (1)       +---------------+
|               +---------------->               |
|   Transport   |                |   Handshake   |
|               <----------------+               |
+-+-----^-------+      (2)       +-----+-----^---+
  |     |                              |     |
  |     |(6)                        (3)|     |
  |     |                              |     |(4)
  |     |        +---------------+     |     |
  |     +--------+               <-----+     |
  |(5)           |    Record     |           |
  +-------------->               +-----------+
                 +---------------+
]]></artwork></figure>

<t><list style="numbers">
  <t>A transport protocol depends upon a handshake protocol to establish keying material to protect application data being sent through the transport. The main interface it relies upon is starting the handshake, or ensuring that the material is ready.</t>
  <t>A handshake protocol depends upon a transport protocol in order to send and receive negotiation messages with the remote peer.</t>
  <t>A handshake protocol sends its keying material and cryptographic context to the record protocol to use</t>
  <t>A record protocol may signal state expiration events to a handshake protocol</t>
  <t>A transport protocol uses a record protocol to send and receive application data</t>
  <t>A record protocol uses a transport protocol to send and receive encrypted data</t>
</list></t>

<section anchor="handshake-transport-interface" title="Handshake-Transport Interface">

<t>Note that for the purposes of this interface description, it is assumed that the application is primarily interacting with the transport protocol, and thus the handshake protocol interacts with the application primarily through the abstraction of the transport protocol.</t>

<t><list style="symbols">
  <t>Start negotiation: The interface MUST provide an indication to start the protocol handshake for key negotiation, and
have a way to be notified when the handshake is complete.</t>
  <t>Identity constraints: The interface MUST allow the application to constrain the identities that it will accept
a connection to, such as the hostname it expects to be provided in certificate SAN.</t>
  <t>Local identities: The interface MUST allow the local identity to be set via a raw private key or interface to one
to perform cryptographic operations such as signing and decryption.</t>
  <t>State changes: The interface SHOULD provide a way for the transport to be notified of important state changes during
the protocol execution and session lifetime, e.g., when the handshake begins, ends, or when a key update occurs.</t>
  <t>Validation: The interface MUST provide a way for the application to participate in the endpoint authentication and validation,
which can either be specified as parameters to define how the peer’s authentication can be validated, or when the protocol
provides the authentication information for the application to inspect directly.</t>
  <t>Caching domain and lifetime: The application SHOULD be able to specify the instances of the protocol that can share
cached keys, as well as the lifetime of cached resources.</t>
  <t>The protocol SHOULD allow applications to negotiate application protocols and related information.</t>
  <t>The protocol SHOULD allow applications to specify negotiable cryptographic algorithm suites.</t>
  <t>The protocol SHOULD expose the peer’s identity information.</t>
</list></t>

</section>
<section anchor="handshake-record-interface" title="Handshake-Record Interface">

<t><list style="symbols">
  <t>Key export: The interface MUST provide a way to export keying material from a handshake protocol to a record protocol with well-defined cryptographic properties, e.g., “forward-secure” or “perfectly forward secure”</t>
  <t>Key lifetime and rotation: The interface MUST provide a way for the handshake protocol to define key lifetime bounds in terms of <spanx style="emph">time</spanx> or <spanx style="emph">bytes encrypted</spanx> and, additionally, provide a way to forcefully update cryptographic session keys at will. The record protocol MUST be able to signal back to the handshake protocol that a lifetime has been reached and that rotation is required. These values SHOULD be configurable by the application.</t>
</list></t>

</section>
<section anchor="transport-record-interface" title="Transport-Record Interface">

<t><list style="symbols">
  <t>Transform data: The interface MUST provide a way to send raw application data from the transport protocol to a record protocol to transform it based on the keying material. This data is then sent out by the transport protocol. The same applies for inbound data, in which inbound transport data is transformed by the record protocol into raw application data.</t>
  <t>Reliability: The transport MUST specify if messages are transmitted reliable and in order.</t>
  <t>Maximum message size (optional): The transport may specify a maximum message size for the encrypted data if e.g. a datagram transport is used</t>
</list></t>

</section>
</section>
<section anchor="existing-mappings" title="Existing Mappings">

<t>In this section we document existing mappings between common transport security
protocols and the three components described in Section I.</t>

<t><list style="symbols">
  <t>TLS/DTLS: TLS <xref target="RFC5246"/> and DTLS <xref target="RFC6347"/> is a combination of a handshake and record protocol,
with a dependency on some underlying transport.</t>
</list></t>

<figure><artwork><![CDATA[
              Application (configure and I/O)
                |     ^
                |     |
      +---------V-----+--------+
      |        Connection      |
      +----+----^--------------+
+----------|----|------------------------------------+     
|          |    |       --TLS--                      |
|     +----V----+-----+         +---------------+    |
|     |               +--------->               |    |
|     |   Handshake   |         |     Record    |    |
|     |               <---------+               |    |
|     +---------------+         +----+------^---+    |
|                                    |      |        |
+------------------------------------|------|--------+
                                     |      |
                                +----V------+----+
                                |    Transport   |
                                +----------------+
]]></artwork></figure>

<t><list style="symbols">
  <t>QUIC + TLS: The emerging QUIC standard is decomposed into the three pieces outlined in Section I <xref target="I-D.ietf-quic-tls"/>.
TLS is used as the handshake protocol running on a dedicated QUIC stream, a
QUIC-specific record protocol encrypts and encapsulates stream frames, and
the main QUIC component handles the transport of these frames.</t>
</list></t>

<figure><artwork><![CDATA[
    Application (configure and I/O)
      |     ^
+-----|-----|------------------------------------+     
|     |     |      --QUIC--                      |
|     |     |                                    |
|  +--V-----+---+             +--------------+   |   
|  |    QUIC    |------------>|      TLS     |   |
|  | (transport)|             |  (handshake) |   |   
|  |            <-------------+              |   |
|  ++---^--+--^-+             +--^-------+---+   |
|   |   |  |  |                  |       |       |
|   |   |  |  |                  |       |       |
|   |   |  |  |  +V---------+-+  |       |       |
|   |   |  |  +-->   Packet   +--+       |       |
|   |   |  |     | Protection |          |       |
|   |   |  +-----+  (record)  <----------+       |
|   |   |        +------------+                  |
|   |   |                                        |
+---|---|----------+-----------------------------+
    |   |           
+---V---+--------+
|    Transport   |
+----------------+
]]></artwork></figure>

<t><list style="symbols">
  <t>IKEv2 + ESP: IKEv2 <xref target="RFC7296"/> is a handshake protocol commonly used to establish keys for
use in IPsec (often VPN) deployments. It is already a distinct protocol from its commonly paired
record protocol, which is ESP <xref target="RFC4303"/>. ESP encrypts and authenticates IP datagrams, and sends
them as datagrams over a transport mechanism such, e.g., IP or UDP.</t>
</list></t>

<figure><artwork><![CDATA[
        Application (configure)    Application (I/O)                  
          |    ^                     |    ^
     +----V----+-----+         +-----V----+----+    
     |               +--------->               |    
     |     IKEv2     |         |     Record    |    
     |               <---------+               |    
     +----+------^---+         +----+------^---+   
          |      |                    |      |       
     +----V------+------------------V------+----+
     |            (Unreliable) Transport        |
     +------------------------------------------+
]]></artwork></figure>

</section>
<section anchor="benefits-of-separation" title="Benefits of Separation">

<section anchor="reducing-connection-latency" title="Reducing Connection Latency">

<t>One of the clearest benefits of separating the handshake protocol from the record protocol is that the handshake can be performed out-of-band from the application’s data transfer. This should essentially reduce the number of RTTs required before being able to send data by the full length of the handshake (which is commonly 1 or 2 RTTs in the best cases for TLS 1.2 and IKEv2, potentially more if cookie challenges or extended authentication are required).</t>

<t>To avoid long-lived transport connections that wouldn’t be actively used, and thus would be vulnerable to timeouts on NATs or firewalls, an obvious approach to separating the handshake and record protocols is to use different transport connections for the early handshake and the data transfer. However, this approach of using separate connections will not always save RTTs if the handshake and data transfer are back-to-back. Each connection may require its own transport protocol handshake, and if the data transfer must wait for two transport protocols to establish and the cryptographic handshake to be finished before sending, then it may experience higher latency. Implementations SHOULD avoid this by either allowing the handshake and record protocols to share a single transport connection or open two connections in parallel when the handshake protocol has not pre-fetched keys. Latency benefits, however, can even be achieved when ensuring that this scenario does not occur by always having the handshake protocol refresh the keys whenever old ones are near expiry.</t>

</section>
<section anchor="protocol-flexibility" title="Protocol Flexibility">

<t>Separation of the handshake, record, and transport protocols also allows for more flexible composition of protocols with one another. If a deployment uses a handshake protocol like TLS, which requires a stream-based transport protocol like TCP, separation of protocols will allow it to use the resulting keys for record protocols that run on datagram transport protocols like UDP.</t>

<t>This flexibility may be useful for implementations that are optimizing for packet size by choosing minimal/lightweight record protocols, while being able to use commonly supported handshake protocols like TLS. One example here is the approach of a VPN tunnel that uses ESP or Diet-ESP <xref target="I-D.mglt-ipsecme-diet-esp"/> to encrypt datagrams, but uses TLS for establishing keys.</t>

</section>
<section anchor="protocol-capability-negotiation" title="Protocol Capability Negotiation">

<t>Enabling the use of a different transport protocol for the actual data transmission than for the cryptographic handshakes opens also the possibility to negotiate protocol capabilities for the data transmission. For TLS, usually TCP is the appropriate transport protocol to use, as it is also widely supported by endpoints. Allowing an endpoint to indicate the support of other, new transport protocols within the TCP connection that is used for the handshake, provides a dynamic transition path to enable easy deployment of new protocols.</t>

<!-- CAW: a hint to TLPN could be dropped here -->

</section>
</section>
<section anchor="iana-considerations" title="IANA Considerations">

<t>This document has on request to IANA.</t>

</section>
<section anchor="security-considerations" title="Security Considerations">

<t>(editor’s note: this section will be added later. However, this document discusses the use of
cryptographic context for transport connections and as such it has security relevant consideration
within the whole document.)</t>

</section>
<section anchor="acknowledgments" title="Acknowledgments">

<t>This work is partially supported by the European Commission under Horizon 2020
grant agreement no. 688421 Measurement and Architecture for a Middleboxed
Internet (MAMI), and by the Swiss State Secretariat for Education, Research, and
Innovation under contract no. 15.0268. This support does not imply endorsement.</t>

</section>


  </middle>

  <back>


    <references title='Informative References'>





<reference  anchor="RFC4303" target='http://www.rfc-editor.org/info/rfc4303'>
<front>
<title>IP Encapsulating Security Payload (ESP)</title>
<author initials='S.' surname='Kent' fullname='S. Kent'><organization /></author>
<date year='2005' month='December' />
<abstract><t>This document describes an updated version of the Encapsulating Security Payload (ESP) protocol, which is designed to provide a mix of security services in IPv4 and IPv6.  ESP is used to provide confidentiality, data origin authentication, connectionless integrity, an anti-replay service (a form of partial sequence integrity), and limited traffic flow confidentiality.  This document obsoletes RFC 2406 (November 1998).  [STANDARDS-TRACK]</t></abstract>
</front>
<seriesInfo name='RFC' value='4303'/>
<seriesInfo name='DOI' value='10.17487/RFC4303'/>
</reference>



<reference  anchor="RFC5246" target='http://www.rfc-editor.org/info/rfc5246'>
<front>
<title>The Transport Layer Security (TLS) Protocol Version 1.2</title>
<author initials='T.' surname='Dierks' fullname='T. Dierks'><organization /></author>
<author initials='E.' surname='Rescorla' fullname='E. Rescorla'><organization /></author>
<date year='2008' month='August' />
<abstract><t>This document specifies Version 1.2 of the Transport Layer Security (TLS) protocol.  The TLS protocol provides communications security over the Internet.  The protocol allows client/server applications to communicate in a way that is designed to prevent eavesdropping, tampering, or message forgery.  [STANDARDS-TRACK]</t></abstract>
</front>
<seriesInfo name='RFC' value='5246'/>
<seriesInfo name='DOI' value='10.17487/RFC5246'/>
</reference>



<reference  anchor="RFC6347" target='http://www.rfc-editor.org/info/rfc6347'>
<front>
<title>Datagram Transport Layer Security Version 1.2</title>
<author initials='E.' surname='Rescorla' fullname='E. Rescorla'><organization /></author>
<author initials='N.' surname='Modadugu' fullname='N. Modadugu'><organization /></author>
<date year='2012' month='January' />
<abstract><t>This document specifies version 1.2 of the Datagram Transport Layer Security (DTLS) protocol.  The DTLS protocol provides communications privacy for datagram protocols.  The protocol allows client/server applications to communicate in a way that is designed to prevent eavesdropping, tampering, or message forgery.  The DTLS protocol is based on the Transport Layer Security (TLS) protocol and provides equivalent security guarantees.  Datagram semantics of the underlying transport are preserved by the DTLS protocol.  This document updates DTLS 1.0 to work with TLS version 1.2.  [STANDARDS-TRACK]</t></abstract>
</front>
<seriesInfo name='RFC' value='6347'/>
<seriesInfo name='DOI' value='10.17487/RFC6347'/>
</reference>



<reference  anchor="RFC7296" target='http://www.rfc-editor.org/info/rfc7296'>
<front>
<title>Internet Key Exchange Protocol Version 2 (IKEv2)</title>
<author initials='C.' surname='Kaufman' fullname='C. Kaufman'><organization /></author>
<author initials='P.' surname='Hoffman' fullname='P. Hoffman'><organization /></author>
<author initials='Y.' surname='Nir' fullname='Y. Nir'><organization /></author>
<author initials='P.' surname='Eronen' fullname='P. Eronen'><organization /></author>
<author initials='T.' surname='Kivinen' fullname='T. Kivinen'><organization /></author>
<date year='2014' month='October' />
<abstract><t>This document describes version 2 of the Internet Key Exchange (IKE) protocol.  IKE is a component of IPsec used for performing mutual authentication and establishing and maintaining Security Associations (SAs).  This document obsoletes RFC 5996, and includes all of the errata for it.  It advances IKEv2 to be an Internet Standard.</t></abstract>
</front>
<seriesInfo name='STD' value='79'/>
<seriesInfo name='RFC' value='7296'/>
<seriesInfo name='DOI' value='10.17487/RFC7296'/>
</reference>



<reference  anchor="RFC7301" target='http://www.rfc-editor.org/info/rfc7301'>
<front>
<title>Transport Layer Security (TLS) Application-Layer Protocol Negotiation Extension</title>
<author initials='S.' surname='Friedl' fullname='S. Friedl'><organization /></author>
<author initials='A.' surname='Popov' fullname='A. Popov'><organization /></author>
<author initials='A.' surname='Langley' fullname='A. Langley'><organization /></author>
<author initials='E.' surname='Stephan' fullname='E. Stephan'><organization /></author>
<date year='2014' month='July' />
<abstract><t>This document describes a Transport Layer Security (TLS) extension for application-layer protocol negotiation within the TLS handshake. For instances in which multiple application protocols are supported on the same TCP or UDP port, this extension allows the application layer to negotiate which protocol will be used within the TLS connection.</t></abstract>
</front>
<seriesInfo name='RFC' value='7301'/>
<seriesInfo name='DOI' value='10.17487/RFC7301'/>
</reference>



<reference anchor="I-D.ietf-quic-tls">
<front>
<title>Using Transport Layer Security (TLS) to Secure QUIC</title>

<author initials='M' surname='Thomson' fullname='Martin Thomson'>
    <organization />
</author>

<author initials='S' surname='Turner' fullname='Sean Turner'>
    <organization />
</author>

<date month='June' day='13' year='2017' />

<abstract><t>This document describes how Transport Layer Security (TLS) is used to secure QUIC.  Note to Readers  Discussion of this draft takes place on the QUIC working group mailing list (quic@ietf.org), which is archived at https://mailarchive.ietf.org/arch/search/?email_list=quic.  Working Group information can be found at https://github.com/quicwg; source code and issues list for this draft can be found at https://github.com/quicwg/base-drafts/labels/tls.</t></abstract>

</front>

<seriesInfo name='Internet-Draft' value='draft-ietf-quic-tls-04' />
<format type='TXT'
        target='http://www.ietf.org/internet-drafts/draft-ietf-quic-tls-04.txt' />
</reference>



<reference anchor="I-D.moskowitz-sse">
<front>
<title>Session Security Envelope</title>

<author initials='R' surname='Moskowitz' fullname='Robert Moskowitz'>
    <organization />
</author>

<author initials='I' surname='Faynberg' fullname='Igor Faynberg'>
    <organization />
</author>

<author initials='H' surname='Lu' fullname='Huilan Lu'>
    <organization />
</author>

<author initials='S' surname='Hares' fullname='Susan Hares'>
    <organization />
</author>

<author initials='P' surname='Giacomin' fullname='Pierpaolo Giacomin'>
    <organization />
</author>

<date month='June' day='27' year='2017' />

<abstract><t>This memo specifies the details of the Session Security Envelope (SSE).  SSE is a session protocol aiming to guarantee confidentiality, integrity and authentication completely independently by the underlying context, namely network and transport layers.  A single session using the SEE protocol can include a single transport session or multiple transport sessions.  This mean that SSE can survive the break-down in network and transport layers or to attacks carried against them.  SSE is also applicable in networks lacking in classic inter-networking and transport protocols SSE relies on modern AEAD block cipher modes of operations, a class of block cipher modes which allows, at the same time, to authenticate the message while encrypting a part of it.</t></abstract>

</front>

<seriesInfo name='Internet-Draft' value='draft-moskowitz-sse-05' />
<format type='TXT'
        target='http://www.ietf.org/internet-drafts/draft-moskowitz-sse-05.txt' />
</reference>



<reference anchor="I-D.mglt-ipsecme-diet-esp">
<front>
<title>ESP Header Compression and Diet-ESP</title>

<author initials='D' surname='Migault' fullname='Daniel Migault'>
    <organization />
</author>

<author initials='T' surname='Guggemos' fullname='Tobias Guggemos'>
    <organization />
</author>

<author initials='C' surname='Bormann' fullname='Carsten Bormann'>
    <organization />
</author>

<date month='June' day='30' year='2017' />

<abstract><t>ESP Header Compression (EHC) defines a flexible framework to compress communications protected with IPsec/ESP.  Compression and decompression is defined by EHC Rules orchestrated by EHC Strategies.  The document specifies the Diet-ESP EHC Strategy and associated EHC Rules.  Diet-ESP compresses up to 32 bytes per packet for traditional IPv6 VPN and up to 66 bytes for IPv6 VPN set over a single TCP or UDP session.</t></abstract>

</front>

<seriesInfo name='Internet-Draft' value='draft-mglt-ipsecme-diet-esp-04' />
<format type='TXT'
        target='http://www.ietf.org/internet-drafts/draft-mglt-ipsecme-diet-esp-04.txt' />
</reference>


<reference anchor="TransportSecuritySurvey" >
  <front>
    <title>A Survey of Transport Security Protocols</title>
    <author >
      <organization></organization>
    </author>
    <date year="n.d."/>
  </front>
</reference>


    </references>



  </back>

<!-- ##markdown-source:
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
BxcnWTnyTgXaDRLHsjaEwjz6H2WNqY0URQAA

-->

</rfc>

