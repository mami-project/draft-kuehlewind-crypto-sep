<?xml version="1.0" encoding="UTF-8"?>
  <?xml-stylesheet type="text/xsl" href="rfc2629.xslt" ?>
  <!-- generated by https://github.com/cabo/kramdown-rfc2629 version 1.2.3 -->

<!DOCTYPE rfc SYSTEM "rfc2629.dtd" [
]>

<?rfc toc="yes"?>
<?rfc sortrefs="yes"?>
<?rfc symrefs="yes"?>

<rfc ipr="trust200902" docName="draft-kuehlewind-taps-crypto-sep-00" category="info">

  <front>
    <title abbrev="crypto separation">Separating Crypto Negotiation and Communication</title>

    <author initials="M." surname="Kuehlewind" fullname="Mirja Kuehlewind">
      <organization>ETH Zurich</organization>
      <address>
        <postal>
          <street>Gloriastrasse 35</street>
          <city>8092 Zurich</city>
          <country>Switzerland</country>
        </postal>
        <email>mirja.kuehlewind@tik.ee.ethz.ch</email>
      </address>
    </author>
    <author initials="T." surname="Pauly" fullname="Tommy Pauly">
      <organization>Apple Inc.</organization>
      <address>
        <postal>
          <street>1 Infinite Loop</street>
          <city>Cupertino, California 95014</city>
          <country>United States of America</country>
        </postal>
        <email>tpauly@apple.com</email>
      </address>
    </author>
    <author initials="C.A." surname="Wood" fullname="Christopher A. Wood">
      <organization>Apple Inc.</organization>
      <address>
        <postal>
          <street>1 Infinite Loop</street>
          <city>Cupertino, California 95014</city>
          <country>United States of America</country>
        </postal>
        <email>cawood@apple.com</email>
      </address>
    </author>

    <date year="2017" month="July" day="03"/>

    
    
    <keyword>Internet-Draft</keyword>

    <abstract>


<t>Due to the latency involved in connection setup and security handshakes, there is an increasing
deployment of cryptographic session resumption mechanisms. While cryptographic context and
endpoint capabilities need to be be known before encrypted application data can be sent, there is
otherwise no technical constraint that the crypto handshake must be performed on the same transport
connection. This document recommends a logical separation between the mechanism(s) used to negotiate
capabilities and set up encryption context (handshake protocol), the application of encryption and
authentication state to data (record protocol), and the associated transport connection(s).</t>



    </abstract>


  </front>

  <middle>


<section anchor="introduction" title="Introduction">

<t>Secure transport protocols are generally composed of three pieces:</t>

<t><list style="numbers">
  <t>A transport protocol to control the transfer of data.</t>
  <t>A record protocol to frame, encrypt and/or authenticate data</t>
  <t>A handshake protocol to negotiate cryptographic secrets.</t>
</list></t>

<t>For ease of deployment and standardization, among other reasons, these constituents are often tightly
coupled. For example, in TLS <xref target="RFC5246"/>, the handshake protocol depends on the record protocol,
and vice versa. However, more recent transport protocols such as QUIC <xref target="I-D.ietf-quic-tls"/> keep
these pieces separate. QUIC uses TLS to negotiate secrets, and <spanx style="emph">exports</spanx> those secrets
to encrypt packets directly.</t>

<t>Separating these pieces is important, as new secure transport protocols increasingly rely on
session resumption mechanisms where cryptographic context can be resumed to transmit
application data with the first packet without delay for connection setup and negotiation.
In the case where there is no cryptographic context available when an application
expresses the need to transmit data to a certain endpoint, it must first run the handshake protocol
on a transport connection before being able to transmit application data. If the handshake protocol can
be separated from the other components, then it can use another transport connection to
establish secrets without blocking the application’s main transport connection. This also opens up
the possibility to run the handshake protocol well in advance of the need to send application data,
to avoid unnecessary delays. For example, a client system could maintain a database of endpoints it
is likely to communicate with, and establish keying material with a handshake protocol at periodic
intervals to ensure fresh keys for new transport connections.</t>

<t><xref target="I-D.moskowitz-sse"/> proposes a similar approach. However while <xref target="I-D.moskowitz-sse"/> proposes
a new protocol to negotiate and maintain long-term cryptographic sessions,
this document relies on the use of existing protocols and only discusses requirements for the evolution
of these protocols and exchange of information within one endpoint locally.</t>

</section>
<section anchor="terminology" title="Terminology">

<t><list style="symbols">
  <t>Transport Protocol: A protocol that can transport messages between two endpoints. This may represent the service offered to applications to allow them to send and receive data before encryption; and also represent the protocol that can transmit handshake data and encrypted records.</t>
  <t>Handshake Protocol: A protocol that can validate and authenticate endpoints, encrypt and authenticate its negotiation, and ultimately generate keying material.</t>
  <t>Record Protocol: A protocol that can use keying material to transform messages. A record will generally add a frame around application data, and authenticate and/or encrypt the data.</t>
  <t>Keying Material: One or more pre-shared keys that can be used to encrypt and authenticate data, generated by a handshake protocol and used by a record protocol.</t>
</list></t>

</section>
<section anchor="protocol-interfaces" title="Protocol Interfaces">

<t>In traditional models in which the protocols are not separated out into the three elements of handshake,
record, and transport protocols, there are two basic approaches to the interactions:</t>

<t><list style="numbers">
  <t>The transport protocol provides data to the security protocol and gets back an encrypted version of
the data to be sent (handshake and record protocols are combined)</t>
  <t>The security protocol provides keying material to the transport protocol, and the transport protocol is
responsible for encrypting data (transport and record protocols are combined)</t>
</list></t>

<t>By teasing apart all three portions as separate protocols, there end up being six interface points:</t>

<figure title="Secure Transport Protocol Components and Interactions" anchor="fig-dependencies"><artwork><![CDATA[
Application Data
     |    ^
     |    |
+----V----+-----+      (1)       +---------------+
|               +---------------->               |
|   Transport   |                |   Handshake   |
|               <----------------+               |
+-+-----^-------+      (2)       +-----+-----^---+
  |     |                              |     |
  |     |(6)                        (3)|     |
  |     |                              |     |(4)
  |     |        +---------------+     |     |
  |     +--------+               <-----+     |
  |(5)           |    Record     |           |
  +-------------->               +-----------+
                 +---------------+
]]></artwork></figure>

<t><list style="numbers">
  <t>A transport protocol depends upon a handshake protocol to establish keying material to protect application data being sent through the transport. The main interface it relies upon is starting the handshake, or ensuring that the material is ready.</t>
  <t>A handshake protocol depends upon a transport protocol in order to send and receive negotiation messages with the remote peer.</t>
  <t>A handshake protocol sends its keying material and cryptographic context to the record protocol to use</t>
  <t>A record protocol may signal state expiration events to a handshake protocol</t>
  <t>A transport protocol uses a record protocol to send and receive application data</t>
  <t>A record protocol uses a transport protocol to send and receive encrypted data</t>
</list></t>

<section anchor="handshake-transport-interface" title="Handshake-Transport Interface">

<t>Note that for the purposes of this interface description, it is assumed that the application is primarily interacting with the transport protocol, and thus the handshake protocol interacts with the application primarily through the abstraction of the transport protocol.</t>

<t><list style="symbols">
  <t>Start negotiation: The interface MUST provide an indication to start the protocol handshake for key negotiation, and
have a way to be notified when the handshake is complete.</t>
  <t>Identity constraints: The interface MUST allow the application to constrain the identities that it will accept
a connection to, such as the hostname it expects to be provided in certificate SAN.</t>
  <t>Local identities: The interface MUST allow the local identity to be set via a raw private key or interface to one
to perform cryptographic operations such as signing and decryption.</t>
  <t>State changes: The interface SHOULD provide a way for the transport to be notified of important state changes during
the protocol execution and session lifetime, e.g., when the handshake begins, ends, or when a key update occurs.</t>
  <t>Validation: The interface MUST provide a way for the application to participate in the endpoint authentication and validation,
which can either be specified as parameters to define how the peer’s authentication can be validated, or when the protocol
provides the authentication information for the application to inspect directly.</t>
  <t>Caching domain and lifetime: The application SHOULD be able to specify the instances of the protocol that can share
cached keys, as well as the lifetime of cached resources.</t>
  <t>The protocol SHOULD allow applications to negotiate application protocols and related information.</t>
  <t>The protocol SHOULD allow applications to specify negotiable cryptographic algorithm suites.</t>
  <t>The protocol SHOULD expose the peer’s identity information.</t>
</list></t>

</section>
<section anchor="handshake-record-interface" title="Handshake-Record Interface">

<t><list style="symbols">
  <t>Key export: The interface MUST provide a way to export keying material from a handshake protocol to a record protocol with well-defined cryptographic properties, e.g., “forward-secure” or “perfectly forward secure”</t>
  <t>Key lifetime and rotation: The interface MUST provide a way for the handshake protocol to define key lifetime bounds in terms of <spanx style="emph">time</spanx> or <spanx style="emph">bytes encrypted</spanx> and, additionally, provide a way to forcefully update cryptographic session keys at will. The record protocol MUST be able to signal back to the handshake protocol that a lifetime has been reached and that rotation is required. These values SHOULD be configurable by the application.</t>
</list></t>

</section>
<section anchor="transport-record-interface" title="Transport-Record Interface">

<t><list style="symbols">
  <t>Transform data: The interface MUST provide a way to send raw application data from the transport protocol to a record protocol to transform it based on the keying material. This data is then sent out by the transport protocol. The same applies for inbound data, in which inbound transport data is transformed by the record protocol into raw application data.</t>
  <t>Reliability: The transport MUST specify if messages are transmitted reliable and in order.</t>
  <t>Maximum message size (optional): The transport may specify a maximum message size for the encrypted data if e.g. a datagram transport is used</t>
</list></t>

</section>
</section>
<section anchor="existing-mappings" title="Existing Mappings">

<t>In this section we document existing mappings between common transport security
protocols and the three components described in Section I.</t>

<t><list style="symbols">
  <t>TLS/DTLS: TLS <xref target="RFC5246"/> and DTLS <xref target="RFC6347"/> is a combination of a handshake and record protocol,
with a dependency on some underlying transport.</t>
</list></t>

<figure><artwork><![CDATA[
              Application (configure and I/O)
                |     ^
                |     |
      +---------V-----+--------+
      |        Connection      |
      +----+----^--------------+
+----------|----|------------------------------------+     
|          |    |       --TLS--                      |
|     +----V----+-----+         +---------------+    |
|     |               +--------->               |    |
|     |   Handshake   |         |     Record    |    |
|     |               <---------+               |    |
|     +---------------+         +----+------^---+    |
|                                    |      |        |
+------------------------------------|------|--------+
                                     |      |
                                +----V------+----+
                                |    Transport   |
                                +----------------+
]]></artwork></figure>

<t><list style="symbols">
  <t>QUIC + TLS: The emerging QUIC standard is decomposed into the three pieces outlined in Section I <xref target="I-D.ietf-quic-tls"/>.
TLS is used as the handshake protocol running on a dedicated QUIC stream, a
QUIC-specific record protocol encrypts and encapsulates stream frames, and
the main QUIC component handles the transport of these frames.</t>
</list></t>

<figure><artwork><![CDATA[
    Application (configure and I/O)
      |     ^
+-----|-----|------------------------------------+     
|     |     |      --QUIC--                      |
|     |     |                                    |
|  +--V-----+---+             +--------------+   |   
|  |    QUIC    |------------>|      TLS     |   |
|  | (transport)|             |  (handshake) |   |   
|  |            <-------------+              |   |
|  ++---^--+--^-+             +--^-------+---+   |
|   |   |  |  |                  |       |       |
|   |   |  |  |                  |       |       |
|   |   |  |  |  +V---------+-+  |       |       |
|   |   |  |  +-->   Packet   +--+       |       |
|   |   |  |     | Protection |          |       |
|   |   |  +-----+  (record)  <----------+       |
|   |   |        +------------+                  |
|   |   |                                        |
+---|---|----------+-----------------------------+
    |   |           
+---V---+--------+
|    Transport   |
+----------------+
]]></artwork></figure>

<t><list style="symbols">
  <t>IKEv2 + ESP: IKEv2 <xref target="RFC7296"/> is a handshake protocol commonly used to establish keys for
use in IPsec (often VPN) deployments. It is already a distinct protocol from its commonly paired
record protocol, which is ESP <xref target="RFC4303"/>. ESP encrypts and authenticates IP datagrams, and sends
them as datagrams over a transport mechanism such, e.g., IP or UDP.</t>
</list></t>

<figure><artwork><![CDATA[
        Application (configure)    Application (I/O)                  
          |    ^                     |    ^
     +----V----+-----+         +-----V----+----+    
     |               +--------->               |    
     |     IKEv2     |         |     Record    |    
     |               <---------+               |    
     +----+------^---+         +----+------^---+   
          |      |                    |      |       
     +----V------+------------------V------+----+
     |            (Unreliable) Transport        |
     +------------------------------------------+
]]></artwork></figure>

</section>
<section anchor="benefits-of-separation" title="Benefits of Separation">

<section anchor="reducing-connection-latency" title="Reducing Connection Latency">

<t>One of the clearest benefits of separating the handshake protocol from the record protocol is that the handshake can be performed out-of-band from the application’s data transfer. This should essentially reduce the number of RTTs required before being able to send data by the full length of the handshake (which is commonly 1 or 2 RTTs in the best cases for TLS 1.2 and IKEv2, potentially more if cookie challenges or extended authentication are required).</t>

<t>To avoid long-lived transport connections that wouldn’t be actively used, and thus would be vulnerable to timeouts on NATs or firewalls, an obvious approach to separating the handshake and record protocols is to use different transport connections for the early handshake and the data transfer. However, this approach of using separate connections will not always save RTTs if the handshake and data transfer are back-to-back. Each connection may require its own transport protocol handshake, and if the data transfer must wait for two transport protocols to establish and the cryptographic handshake to be finished before sending, then it may experience higher latency. Implementations SHOULD avoid this by either allowing the handshake and record protocols to share a single transport connection or open two connections in parallel when the handshake protocol has not pre-fetched keys. Latency benefits, however, can even be achieved when ensuring that this scenario does not occur by always having the handshake protocol refresh the keys whenever old ones are near expiry.</t>

</section>
<section anchor="protocol-flexibility" title="Protocol Flexibility">

<t>Separation of the handshake, record, and transport protocols also allows for more flexible composition of protocols with one another. If a deployment uses a handshake protocol like TLS, which requires a stream-based transport protocol like TCP, separation of protocols will allow it to use the resulting keys for record protocols that run on datagram transport protocols like UDP.</t>

<t>This flexibility may be useful for implementations that are optimizing for packet size by choosing minimal/lightweight record protocols, while being able to use commonly supported handshake protocols like TLS. One example here is the approach of a VPN tunnel that uses ESP or Diet-ESP <xref target="I-D.mglt-ipsecme-diet-esp"/> to encrypt datagrams, but uses TLS for establishing keys.</t>

</section>
<section anchor="protocol-capability-negotiation" title="Protocol Capability Negotiation">

<t>Enabling the use of a different transport protocol for the actual data transmission than for the cryptographic handshakes opens also the possibility to negotiate protocol capabilities for the data transmission. For TLS, usually TCP is the appropriate transport protocol to use, as it is also widely supported by endpoints. Allowing an endpoint to indicate the support of other, new transport protocols within the TCP connection that is used for the handshake, provides a dynamic transition path to enable easy deployment of new protocols.</t>

<!-- CAW: a hint to TLPN could be dropped here -->

</section>
</section>
<section anchor="iana-considerations" title="IANA Considerations">

<t>This document has on request to IANA.</t>

</section>
<section anchor="security-considerations" title="Security Considerations">

<t>(editor’s note: this section will be added later. However, this document discusses the use of
cryptographic context for transport connections and as such it has security relevant consideration
within the whole document.)</t>

</section>
<section anchor="acknowledgments" title="Acknowledgments">

<t>This work is partially supported by the European Commission under Horizon 2020
grant agreement no. 688421 Measurement and Architecture for a Middleboxed
Internet (MAMI), and by the Swiss State Secretariat for Education, Research, and
Innovation under contract no. 15.0268. This support does not imply endorsement.</t>

</section>


  </middle>

  <back>


    <references title='Informative References'>





<reference  anchor="RFC4303" target='http://www.rfc-editor.org/info/rfc4303'>
<front>
<title>IP Encapsulating Security Payload (ESP)</title>
<author initials='S.' surname='Kent' fullname='S. Kent'><organization /></author>
<date year='2005' month='December' />
<abstract><t>This document describes an updated version of the Encapsulating Security Payload (ESP) protocol, which is designed to provide a mix of security services in IPv4 and IPv6.  ESP is used to provide confidentiality, data origin authentication, connectionless integrity, an anti-replay service (a form of partial sequence integrity), and limited traffic flow confidentiality.  This document obsoletes RFC 2406 (November 1998).  [STANDARDS-TRACK]</t></abstract>
</front>
<seriesInfo name='RFC' value='4303'/>
<seriesInfo name='DOI' value='10.17487/RFC4303'/>
</reference>



<reference  anchor="RFC5246" target='http://www.rfc-editor.org/info/rfc5246'>
<front>
<title>The Transport Layer Security (TLS) Protocol Version 1.2</title>
<author initials='T.' surname='Dierks' fullname='T. Dierks'><organization /></author>
<author initials='E.' surname='Rescorla' fullname='E. Rescorla'><organization /></author>
<date year='2008' month='August' />
<abstract><t>This document specifies Version 1.2 of the Transport Layer Security (TLS) protocol.  The TLS protocol provides communications security over the Internet.  The protocol allows client/server applications to communicate in a way that is designed to prevent eavesdropping, tampering, or message forgery.  [STANDARDS-TRACK]</t></abstract>
</front>
<seriesInfo name='RFC' value='5246'/>
<seriesInfo name='DOI' value='10.17487/RFC5246'/>
</reference>



<reference  anchor="RFC6347" target='http://www.rfc-editor.org/info/rfc6347'>
<front>
<title>Datagram Transport Layer Security Version 1.2</title>
<author initials='E.' surname='Rescorla' fullname='E. Rescorla'><organization /></author>
<author initials='N.' surname='Modadugu' fullname='N. Modadugu'><organization /></author>
<date year='2012' month='January' />
<abstract><t>This document specifies version 1.2 of the Datagram Transport Layer Security (DTLS) protocol.  The DTLS protocol provides communications privacy for datagram protocols.  The protocol allows client/server applications to communicate in a way that is designed to prevent eavesdropping, tampering, or message forgery.  The DTLS protocol is based on the Transport Layer Security (TLS) protocol and provides equivalent security guarantees.  Datagram semantics of the underlying transport are preserved by the DTLS protocol.  This document updates DTLS 1.0 to work with TLS version 1.2.  [STANDARDS-TRACK]</t></abstract>
</front>
<seriesInfo name='RFC' value='6347'/>
<seriesInfo name='DOI' value='10.17487/RFC6347'/>
</reference>



<reference  anchor="RFC7296" target='http://www.rfc-editor.org/info/rfc7296'>
<front>
<title>Internet Key Exchange Protocol Version 2 (IKEv2)</title>
<author initials='C.' surname='Kaufman' fullname='C. Kaufman'><organization /></author>
<author initials='P.' surname='Hoffman' fullname='P. Hoffman'><organization /></author>
<author initials='Y.' surname='Nir' fullname='Y. Nir'><organization /></author>
<author initials='P.' surname='Eronen' fullname='P. Eronen'><organization /></author>
<author initials='T.' surname='Kivinen' fullname='T. Kivinen'><organization /></author>
<date year='2014' month='October' />
<abstract><t>This document describes version 2 of the Internet Key Exchange (IKE) protocol.  IKE is a component of IPsec used for performing mutual authentication and establishing and maintaining Security Associations (SAs).  This document obsoletes RFC 5996, and includes all of the errata for it.  It advances IKEv2 to be an Internet Standard.</t></abstract>
</front>
<seriesInfo name='STD' value='79'/>
<seriesInfo name='RFC' value='7296'/>
<seriesInfo name='DOI' value='10.17487/RFC7296'/>
</reference>



<reference  anchor="RFC7301" target='http://www.rfc-editor.org/info/rfc7301'>
<front>
<title>Transport Layer Security (TLS) Application-Layer Protocol Negotiation Extension</title>
<author initials='S.' surname='Friedl' fullname='S. Friedl'><organization /></author>
<author initials='A.' surname='Popov' fullname='A. Popov'><organization /></author>
<author initials='A.' surname='Langley' fullname='A. Langley'><organization /></author>
<author initials='E.' surname='Stephan' fullname='E. Stephan'><organization /></author>
<date year='2014' month='July' />
<abstract><t>This document describes a Transport Layer Security (TLS) extension for application-layer protocol negotiation within the TLS handshake. For instances in which multiple application protocols are supported on the same TCP or UDP port, this extension allows the application layer to negotiate which protocol will be used within the TLS connection.</t></abstract>
</front>
<seriesInfo name='RFC' value='7301'/>
<seriesInfo name='DOI' value='10.17487/RFC7301'/>
</reference>



<reference anchor="I-D.ietf-quic-tls">
<front>
<title>Using Transport Layer Security (TLS) to Secure QUIC</title>

<author initials='M' surname='Thomson' fullname='Martin Thomson'>
    <organization />
</author>

<author initials='S' surname='Turner' fullname='Sean Turner'>
    <organization />
</author>

<date month='June' day='13' year='2017' />

<abstract><t>This document describes how Transport Layer Security (TLS) is used to secure QUIC.  Note to Readers  Discussion of this draft takes place on the QUIC working group mailing list (quic@ietf.org), which is archived at https://mailarchive.ietf.org/arch/search/?email_list=quic.  Working Group information can be found at https://github.com/quicwg; source code and issues list for this draft can be found at https://github.com/quicwg/base-drafts/labels/tls.</t></abstract>

</front>

<seriesInfo name='Internet-Draft' value='draft-ietf-quic-tls-04' />
<format type='TXT'
        target='http://www.ietf.org/internet-drafts/draft-ietf-quic-tls-04.txt' />
</reference>



<reference anchor="I-D.moskowitz-sse">
<front>
<title>Session Security Envelope</title>

<author initials='R' surname='Moskowitz' fullname='Robert Moskowitz'>
    <organization />
</author>

<author initials='I' surname='Faynberg' fullname='Igor Faynberg'>
    <organization />
</author>

<author initials='H' surname='Lu' fullname='Huilan Lu'>
    <organization />
</author>

<author initials='S' surname='Hares' fullname='Susan Hares'>
    <organization />
</author>

<author initials='P' surname='Giacomin' fullname='Pierpaolo Giacomin'>
    <organization />
</author>

<date month='June' day='27' year='2017' />

<abstract><t>This memo specifies the details of the Session Security Envelope (SSE).  SSE is a session protocol aiming to guarantee confidentiality, integrity and authentication completely independently by the underlying context, namely network and transport layers.  A single session using the SEE protocol can include a single transport session or multiple transport sessions.  This mean that SSE can survive the break-down in network and transport layers or to attacks carried against them.  SSE is also applicable in networks lacking in classic inter-networking and transport protocols SSE relies on modern AEAD block cipher modes of operations, a class of block cipher modes which allows, at the same time, to authenticate the message while encrypting a part of it.</t></abstract>

</front>

<seriesInfo name='Internet-Draft' value='draft-moskowitz-sse-05' />
<format type='TXT'
        target='http://www.ietf.org/internet-drafts/draft-moskowitz-sse-05.txt' />
</reference>



<reference anchor="I-D.mglt-ipsecme-diet-esp">
<front>
<title>ESP Header Compression and Diet-ESP</title>

<author initials='D' surname='Migault' fullname='Daniel Migault'>
    <organization />
</author>

<author initials='T' surname='Guggemos' fullname='Tobias Guggemos'>
    <organization />
</author>

<author initials='C' surname='Bormann' fullname='Carsten Bormann'>
    <organization />
</author>

<date month='June' day='30' year='2017' />

<abstract><t>ESP Header Compression (EHC) defines a flexible framework to compress communications protected with IPsec/ESP.  Compression and decompression is defined by EHC Rules orchestrated by EHC Strategies.  The document specifies the Diet-ESP EHC Strategy and associated EHC Rules.  Diet-ESP compresses up to 32 bytes per packet for traditional IPv6 VPN and up to 66 bytes for IPv6 VPN set over a single TCP or UDP session.</t></abstract>

</front>

<seriesInfo name='Internet-Draft' value='draft-mglt-ipsecme-diet-esp-04' />
<format type='TXT'
        target='http://www.ietf.org/internet-drafts/draft-mglt-ipsecme-diet-esp-04.txt' />
</reference>




    </references>



  </back>

<!-- ##markdown-source:
H4sIAIRdWlkAA81cWXMbR5J+719RKz+YFNmwRB22ud6J4VDymmFJ1pqUJmI3
VhuF7gJQw76mqxsQZNq/ffOoqw+IcsQ+LEImQaCrKjMr86u8ymmaJp3uCnUu
rlUjW9npai0u233T1eKNWtedho/qSsgqF5d1WfaVzuiTRC6Xrdqei4wfNnY4
fJPXWSVLmDJv5apLb3u1KdROV3naycakPCCFAWkhO2W6JIdf5wnMCwu2+3Oh
q1WdJLppz0XX9qY7e/To+0dnya3a7+o2PxdXVafaSnXpC1wgSUwH5P2PLOoK
Ft0rkzT6XPxXV2enwtRt16qVgXf7Et/8d5LIvtvU7Xki0kTAS1fmXLxeiJ89
nfQxs/Bat/+Q46/qdn0uXt78JP6zb3W2oc9UKXVxLkp8fhFY/munbxdKLVS3
+bSwjxqgSHXn4t+LutUS/pLGKPHkGX2Z6Q4k8N2j78/i2bO6rzoUzfVOd59U
W0gkJaL/ZiHeyr7YR6TfwHbto0+J6oumKRQIMFsMSHkMH610pTslXtV1E1Fy
2TeqBa2oT8WlLPSqbistxffPHj1+OqTsHY7OxXWHeyrqlbgoFdAvY+l0DVLz
V4lELLK6HLBwuRAXC/H3uo7lf7lptenqZqPawbf/D5jJ5A6oiZhJUG/bEoxg
C+oMD/764+XTJ4+euPfPzp4+d++fP3n6rXv/7dn3/vNvnzx6TO+v0hcLrbpV
+s9eZ2lXGP9pWZvbGtUgBbUJn66LLtWNUVmp0hxGpso050mSpqmQS1SyDCzl
Ra8EGGu3UQJtr8r2IPttXWyBWV0B/1WlMjJ4o7q+IbOHKUERu73YwF9mI28V
WBPM0CqhDTwBA7NWSQPIkeSqKep9qaoOhcaWvm5ls9EZzGMMztwq05cNLVKq
DCbVpjSwtRsNmzkcAvR06mOHZCSqyptaw8SZbORSF7rTsDWVAsqBo6XCf7dV
vavgDWyDEsAdTgbf4xZZ2BKANRKmwKeAoqoLrCQ1vttpsMUKRASkIdYVSASK
D5fuNrIj4VnQ8xIRJcAUTgn6hToAi8Ja+KQBNQYUk5VpAIqSIOGFuNmA/AAs
e5JXq0CH4F0OMhVFvaa1A6rC5N1OKZ7Uy+3IHIvesAgqC9cqGUiIt7ATsJtW
Ijibk+xRYKFpa4DMujgmkQyEBnsZjcXdQAwFqt0DBg0FiSDxHiEvbR7PiFTQ
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

-->

</rfc>

