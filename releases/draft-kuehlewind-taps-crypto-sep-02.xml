<?xml version="1.0" encoding="UTF-8"?>
  <?xml-stylesheet type="text/xsl" href="rfc2629.xslt" ?>
  <!-- generated by https://github.com/cabo/kramdown-rfc2629 version 1.2.8 -->

<!DOCTYPE rfc SYSTEM "rfc2629.dtd" [
]>

<?rfc toc="yes"?>
<?rfc sortrefs="yes"?>
<?rfc symrefs="yes"?>

<rfc ipr="trust200902" docName="draft-kuehlewind-taps-crypto-sep-02" category="info">

  <front>
    <title abbrev="crypto separation">Separating Crypto Negotiation and Communication</title>

    <author initials="M." surname="Kuehlewind" fullname="Mirja Kuehlewind">
      <organization>ETH Zurich</organization>
      <address>
        <postal>
          <street>Gloriastrasse 35</street>
          <city>8092 Zurich</city>
          <country>Switzerland</country>
        </postal>
        <email>mirja.kuehlewind@tik.ee.ethz.ch</email>
      </address>
    </author>
    <author initials="T." surname="Pauly" fullname="Tommy Pauly">
      <organization>Apple Inc.</organization>
      <address>
        <postal>
          <street>One Apple Park Way</street>
          <city>Cupertino, California 95014</city>
          <country>United States of America</country>
        </postal>
        <email>tpauly@apple.com</email>
      </address>
    </author>
    <author initials="C.A." surname="Wood" fullname="Christopher A. Wood">
      <organization>Apple Inc.</organization>
      <address>
        <postal>
          <street>One Apple Park Way</street>
          <city>Cupertino, California 95014</city>
          <country>United States of America</country>
        </postal>
        <email>cawood@apple.com</email>
      </address>
    </author>

    <date year="2018" month="March" day="05"/>

    
    
    <keyword>Internet-Draft</keyword>

    <abstract>


<t>Secure transport protocols often consist of three logically distinct components: transport, 
control (handshake), and record protection. Typically, such a protocol contains a single 
module that is responsible for all three functions. However, in many cases, this coupling is unnecessary.
For example, while cryptographic context and endpoint capabilities need to be known before 
encrypted application data can be sent on a specific transport connection, there is otherwise no technical constraint that a cryptographic 
handshake must be performed on said connection. This document recommends a logical separation 
between transport, control, and record components of secure transport protocols. We compare existing protocols 
such as Transport Layer Security, QUIC, and IKEv2+ESP in the context of this logical separation.</t>



    </abstract>


  </front>

  <middle>


<section anchor="introduction" title="Introduction">

<t>Secure transport protocols are generally composed of three pieces:</t>

<t><list style="numbers">
  <t>A transport protocol to handle the transfer of data.</t>
  <t>A record protocol to frame, encrypt and/or authenticate data</t>
  <t>A control protocol to perform cryptographic handshakes, negotiate shared secrets,
and maintain state during the lifetime of cryptographic session including session resumption
and key refreshment. (In the context of TLS, the control protocol is called the handshake protocol.)</t>
</list></t>

<t>For ease of deployment and standardization, among other reasons, these constituents are often tightly
coupled. For example, in TLS <xref target="RFC5246"/>, the control protocol depends on the record protocol,
and vice versa. However, more recent transport protocols such as QUIC <xref target="I-D.ietf-quic-tls"/> keep
these pieces separate. For example, QUIC uses TLS to negotiate secrets, and exports those secrets
to encrypt packets independent of TLS.</t>

<t>Separating these pieces is important, as new secure transport protocols increasingly rely on
session resumption mechanisms where cryptographic context can be resumed to transmit
application data with the first packet without delay for connection setup and negotiation.
In the case where there is no cryptographic context available when an application
expresses the need to transmit data to a certain endpoint, it must first run the control protocol
on a transport connection before being able to transmit application data. If the control protocol can
be separated from the other components, then it can use another transport connection to
establish secrets without blocking the application’s main transport connection. This also opens up
the possibility to run the control protocol well in advance of the need to send application data,
to avoid unnecessary delays. For example, a client system could maintain a database of endpoints it
is likely to communicate with, and establish keying material with a control protocol at periodic
intervals to ensure fresh keys for new transport connections.</t>

<t><xref target="I-D.moskowitz-sse"/> proposes a similar approach. However while <xref target="I-D.moskowitz-sse"/> proposes
a new protocol to negotiate and maintain long-term cryptographic sessions,
this document relies on the use of existing protocols and only discusses requirements for the evolution
of these protocols and exchange of information within one endpoint locally.</t>

</section>
<section anchor="terminology" title="Terminology">

<t><list style="symbols">
  <t>Transport Protocol: A protocol that can transport messages between two endpoints. This may represent
the service offered to applications to allow them to send and receive data before encryption; and also
represent the protocol that can transmit control data and encrypted records.</t>
  <t>Control Protocol: A protocol that performs a cryptographic handshake and, in addition, can validate and
authenticate endpoints, encrypt and authenticate its negotiation, and ultimately generate keying material.</t>
  <t>Record Protocol: A protocol that can use keying material to transform messages. A record will generally
add a frame around application data, and authenticate and/or encrypt the data.</t>
  <t>Keying Material: A shared secret from which pre-shared keys can be derived and subsequently used to
encrypt and authenticate data, generated by a control protocol and used by a record protocol.</t>
</list></t>

</section>
<section anchor="protocol-interfaces" title="Protocol Interfaces">

<t>In traditional models in which the protocols are not separated out into the three elements of control,
record, and transport protocols, there are two basic approaches to the interactions:</t>

<t><list style="numbers">
  <t>The transport protocol provides data to the security protocol and gets back an encrypted version of
the data to be sent (control and record protocols are combined).</t>
  <t>The security protocol provides keying material to the transport protocol, and the transport protocol is
responsible for encrypting data (transport and record protocols are combined).</t>
</list></t>

<t>By teasing apart all three portions as separate protocols, there end up being six interface points:</t>

<figure title="Secure Transport Protocol Components and Interactions" anchor="fig-dependencies"><artwork><![CDATA[
Application Data
     |    ^
     |    |
+----V----+-----+      (1)       +---------------+
|               +---------------->               |
|   Transport   |                |     Control   |
|               <----------------+               |
+-+-----^-------+      (2)       +-----+-----^---+
  |     |                              |     |
  |     |(6)                        (3)|     |
  |     |                              |     |(4)
  |     |        +---------------+     |     |
  |     +--------+               <-----+     |
  |(5)           |    Record     |           |
  +-------------->               +-----------+
                 +---------------+
]]></artwork></figure>

<t><list style="numbers">
  <t>A transport protocol depends upon a control protocol to establish keying material to protect application data being sent through the transport.
The main interface it relies upon is starting the control channel, or handshake, or ensuring that the material is ready.</t>
  <t>A control protocol depends upon a transport protocol in order to send and receive negotiation messages with the remote peer.</t>
  <t>A control protocol sends its keying material and cryptographic context to the record protocol to use.</t>
  <t>A record protocol may signal state expiration events to a control protocol.</t>
  <t>A transport protocol uses a record protocol to send and receive application data.</t>
  <t>A record protocol uses a transport protocol to send and receive encrypted data.</t>
</list></t>

<section anchor="control-transport" title="Control-Transport Interface">

<t>Note that for the purposes of this interface description, it is assumed that the application is primarily interacting
with the transport protocol, and thus the control protocol interacts with the application primarily through the abstraction
of the transport protocol. Since security protocol interfaces often require pre-connection and active behavior on behalf
of clients, we further categorize the following interfaces based on whether they are meant for
passive configuration or active control.</t>

<section anchor="passive-configuration-interface" title="Passive Configuration Interface">

<t><list style="symbols">
  <t>Start negotiation: The interface MUST provide an indication to start the protocol handshake for key negotiation, and
have a way to be notified when the handshake is complete.</t>
  <t>Identity constraints: The interface MUST allow the application to constrain the identities that it will accept
a connection to, such as the hostname it expects to be provided in certificate SAN.</t>
  <t>Local identities: The interface MUST allow the local identity to be set via a raw private key or interface to one
to perform cryptographic operations such as signing and decryption.</t>
  <t>Caching domain and lifetime: The application SHOULD be able to specify the instances of the protocol that can share
cached keys, as well as the lifetime of cached resources.</t>
  <t>Pre-shared keying material: The application SHOULD be able to specify pre-share keying material
to use to bootstrap connections. The control protocol can pass this directly to the record protocol
for use.</t>
  <t>The protocol SHOULD allow applications to negotiate application protocols and related information.</t>
  <t>The protocol SHOULD allow applications to specify negotiable cryptographic algorithm suites.</t>
</list></t>

</section>
<section anchor="active-control-and-introspection-interface" title="Active Control and Introspection Interface">

<t><list style="symbols">
  <t>State changes: The interface SHOULD provide a way for the transport to be notified of important state changes during
the protocol execution and session lifetime, e.g., when the handshake begins, ends, or when a key update occurs.</t>
  <t>Validation: The interface MUST provide a way for the application to participate in the endpoint authentication and validation,
which can either be specified as parameters to define how the peer’s authentication can be validated, or when the protocol
provides the authentication information for the application to inspect directly.</t>
  <t>The protocol SHOULD expose the peer’s identity information during and after connection establishment.</t>
</list></t>

</section>
</section>
<section anchor="control-record-interface" title="Control-Record Interface">

<t><list style="symbols">
  <t>Key export: The interface MUST provide a way to export keying material from a control protocol to
a record protocol with well-defined cryptographic properties, e.g., “forward-secure.”</t>
  <t>Key lifetime and rotation: The interface MUST provide a way for the control protocol to define key
lifetime bounds in terms of <spanx style="emph">time</spanx> or <spanx style="emph">bytes encrypted</spanx> and, additionally, provide a way to forcefully
update cryptographic session keys at will. The record protocol MUST be able to signal back to the control
protocol that a lifetime has been reached and that rotation is required. These values SHOULD be configurable
by the application.</t>
</list></t>

</section>
<section anchor="transport-record-interface" title="Transport-Record Interface">

<t><list style="symbols">
  <t>Transform data: The interface MUST provide a way to send raw application data from the transport protocol
to a record protocol to transform it based on the keying material. This data is then sent out by the
transport protocol. The same applies for inbound data, in which inbound transport data is transformed
by the record protocol into raw application data.</t>
  <t>Reliability: The transport MUST specify if messages are transmitted reliable and in order.</t>
  <t>Maximum message size (optional): The transport may specify a maximum message size for the encrypted
data if e.g. a datagram transport is used</t>
</list></t>

</section>
</section>
<section anchor="existing-mappings" title="Existing Mappings">

<t>In this section we document existing mappings between common transport security
protocols and the three components described in Section I.</t>

<t><list style="symbols">
  <t>TLS/DTLS: TLS <xref target="RFC5246"/> and DTLS <xref target="RFC6347"/> is a combination of a control (handshake)
and record protocol, with a dependency on some underlying transport.</t>
</list></t>

<figure><artwork><![CDATA[
              Application (configure and I/O)
                |     ^
                |     |
      +---------V-----+--------+
      |        Connection      |
      +----+----^--------------+
+----------|----|------------------------------------+     
|          |    |       --TLS--                      |
|     +----V----+-----+         +---------------+    |
|     |               +--------->               |    |
|     |    Control    |         |     Record    |    |
|     |  (Handshake)  <---------+               |    |
|     +---------------+         +----+------^---+    |
|                                    |      |        |
+------------------------------------|------|--------+
                                     |      |
                                +----V------+----+
                                |    Transport   |
                                +----------------+
]]></artwork></figure>

<t><list style="symbols">
  <t>QUIC + TLS: The emerging QUIC standard is decomposed into the three pieces outlined in Section I <xref target="I-D.ietf-quic-tls"/>.
TLS is used as the control protocol running on a dedicated QUIC stream, a
QUIC-specific record protocol encrypts and encapsulates stream frames, and
the main QUIC component handles the transport of these frames.</t>
</list></t>

<figure><artwork><![CDATA[
    Application (configure and I/O)
      |     ^
+-----|-----|------------------------------------+     
|     |     |      --QUIC--                      |
|     |     |                                    |
|  +--V-----+---+             +--------------+   |   
|  |    QUIC    |------------>|      TLS     |   |
|  | (transport)|             |   (control)  |   |   
|  |            <-------------+              |   |
|  ++---^--+--^-+             +--^-------+---+   |
|   |   |  |  |                  |       |       |
|   |   |  |  |                  |       |       |
|   |   |  |  |  +V---------+-+  |       |       |
|   |   |  |  +-->   Packet   +--+       |       |
|   |   |  |     | Protection |          |       |
|   |   |  +-----+  (record)  <----------+       |
|   |   |        +------------+                  |
|   |   |                                        |
+---|---|----------+-----------------------------+
    |   |           
+---V---+--------+
|    Transport   |
+----------------+
]]></artwork></figure>

<t><list style="symbols">
  <t>IKEv2 + ESP: IKEv2 <xref target="RFC7296"/> is a control protocol commonly used to establish keys for
use in IPsec (often VPN) deployments. It is already a distinct protocol from its commonly paired
record protocol, which is ESP <xref target="RFC4303"/>. ESP encrypts and authenticates IP datagrams, and sends
them as datagrams over a transport mechanism such, e.g., IP or UDP.</t>
</list></t>

<figure><artwork><![CDATA[
        Application (configure)    Application (I/O)                  
          |    ^                     |    ^
     +----V----+-----+         +-----V----+----+    
     |               +--------->               |    
     |     IKEv2     |         |     Record    |    
     |               <---------+               |    
     +----+------^---+         +----+------^---+   
          |      |                    |      |       
     +----V------+------------------V------+----+
     |            (Unreliable) Transport        |
     +------------------------------------------+
]]></artwork></figure>

</section>
<section anchor="benefits-of-separation" title="Benefits of Separation">

<section anchor="reducing-connection-latency" title="Reducing Connection Latency">

<t>One of the clearest benefits of separating the control protocol from the record protocol is that the
cryptographic handshake can be performed out-of-band from the application’s data transfer. This should
essentially reduce the number of RTTs required before being able to send data by the full length of the
handshake (which is commonly 1 or 2 RTTs in the best cases for TLS 1.2 and IKEv2, potentially more if
cookie challenges or extended authentication are required).</t>

<t>To avoid long-lived transport connections that wouldn’t be actively used, and thus would be vulnerable
to timeouts on NATs or firewalls, an obvious approach to separating the control and record protocols
is to use different transport connections for the early handshake and the data transfer. However, this
approach of using separate connections will not always save RTTs if the cryptographic handshake and data transfer are
back-to-back. Each connection may require its own transport protocol handshake, and if the data transfer
must wait for two transport protocols to establish and the cryptographic handshake to be finished before
sending, then it may experience higher latency. Implementations SHOULD avoid this by either allowing the
control and record protocols to share a single transport connection or open two connections in parallel
when the control protocol has not pre-fetched keys. Latency benefits, however, can even be achieved
when ensuring that this scenario does not occur by always having the control protocol refresh the keys
whenever old ones are near expiry.</t>

</section>
<section anchor="protocol-flexibility" title="Protocol Flexibility">

<t>Separation of the control, record, and transport protocols also allows for more flexible composition of
protocols with one another. If a deployment uses a control protocol like TLS, which requires a stream-based
transport protocol like TCP, separation of protocols will allow it to use the resulting keys for record
protocols that run on datagram transport protocols like UDP.</t>

<t>This flexibility may be useful for implementations that are optimizing for packet size by choosing
minimal/lightweight record protocols, while being able to use commonly supported control protocols
like TLS. One example here is the approach of a VPN tunnel that uses ESP or Diet-ESP <xref target="I-D.mglt-ipsecme-diet-esp"/>
to encrypt datagrams, but uses TLS for establishing keys.</t>

</section>
<section anchor="protocol-capability-negotiation" title="Protocol Capability Negotiation">

<t>Enabling the use of a different transport protocol for the actual data transmission than for the
cryptographic handshakes opens also the possibility to negotiate protocol capabilities for the data
transmission. For TLS, usually TCP is the appropriate transport protocol to use, as it is also widely
supported by endpoints. Allowing an endpoint to indicate the support of other, new transport protocols
within the TCP connection that is used for the cryptographic handshake, provides a dynamic
transition path to enable easy deployment of new protocols.</t>

<!-- CAW: a hint to TLPN could be dropped here -->

</section>
</section>
<section anchor="transport-service-architecture-integration" title="Transport Service Architecture Integration">

<t>The Transport Services Architecture (<xref target="I-D.pauly-taps-arch"/>) describes a system 
that can provide transport security functionality behind a common interface.
Such systems and their APIs provide applications with
the ability to establish connections for sending and receiving data. The lifetime
of a connection is comprised of a pre-establishment configuration stage, established
(connected) stage, and terminated stage. Pre-establishment properties configured
include: Local and Remote Endpoint, protocol selection properties, and specific
protocol options. Applications configure security protocols during pre-establishment
using the passive interfaces described in Section <xref target="control-transport"/>. Active
control interfaces are exercised during connection establishment, i.e., from pre-establishment
to established states. Applications can query connection metadata or state information,
e.g., peer identity information, during and after connection establishment.</t>

</section>
<section anchor="iana-considerations" title="IANA Considerations">

<t>This document has on request to IANA.</t>

</section>
<section anchor="security-considerations" title="Security Considerations">

<t>(editor’s note: this section will be added later. However, this document discusses the use of
cryptographic context for transport connections and as such it has security relevant consideration
within the whole document.)</t>

</section>
<section anchor="acknowledgments" title="Acknowledgments">

<t>This work is partially supported by the European Commission under Horizon 2020
grant agreement no. 688421 Measurement and Architecture for a Middleboxed
Internet (MAMI), and by the Swiss State Secretariat for Education, Research, and
Innovation under contract no. 15.0268. This support does not imply endorsement.
Thanks to Brian Trammell for reviewing this draft.</t>

</section>


  </middle>

  <back>


    <references title='Informative References'>





<reference  anchor="RFC4303" target='https://www.rfc-editor.org/info/rfc4303'>
<front>
<title>IP Encapsulating Security Payload (ESP)</title>
<author initials='S.' surname='Kent' fullname='S. Kent'><organization /></author>
<date year='2005' month='December' />
<abstract><t>This document describes an updated version of the Encapsulating Security Payload (ESP) protocol, which is designed to provide a mix of security services in IPv4 and IPv6.  ESP is used to provide confidentiality, data origin authentication, connectionless integrity, an anti-replay service (a form of partial sequence integrity), and limited traffic flow confidentiality.  This document obsoletes RFC 2406 (November 1998).  [STANDARDS-TRACK]</t></abstract>
</front>
<seriesInfo name='RFC' value='4303'/>
<seriesInfo name='DOI' value='10.17487/RFC4303'/>
</reference>



<reference  anchor="RFC5246" target='https://www.rfc-editor.org/info/rfc5246'>
<front>
<title>The Transport Layer Security (TLS) Protocol Version 1.2</title>
<author initials='T.' surname='Dierks' fullname='T. Dierks'><organization /></author>
<author initials='E.' surname='Rescorla' fullname='E. Rescorla'><organization /></author>
<date year='2008' month='August' />
<abstract><t>This document specifies Version 1.2 of the Transport Layer Security (TLS) protocol.  The TLS protocol provides communications security over the Internet.  The protocol allows client/server applications to communicate in a way that is designed to prevent eavesdropping, tampering, or message forgery.  [STANDARDS-TRACK]</t></abstract>
</front>
<seriesInfo name='RFC' value='5246'/>
<seriesInfo name='DOI' value='10.17487/RFC5246'/>
</reference>



<reference  anchor="RFC6347" target='https://www.rfc-editor.org/info/rfc6347'>
<front>
<title>Datagram Transport Layer Security Version 1.2</title>
<author initials='E.' surname='Rescorla' fullname='E. Rescorla'><organization /></author>
<author initials='N.' surname='Modadugu' fullname='N. Modadugu'><organization /></author>
<date year='2012' month='January' />
<abstract><t>This document specifies version 1.2 of the Datagram Transport Layer Security (DTLS) protocol.  The DTLS protocol provides communications privacy for datagram protocols.  The protocol allows client/server applications to communicate in a way that is designed to prevent eavesdropping, tampering, or message forgery.  The DTLS protocol is based on the Transport Layer Security (TLS) protocol and provides equivalent security guarantees.  Datagram semantics of the underlying transport are preserved by the DTLS protocol.  This document updates DTLS 1.0 to work with TLS version 1.2.  [STANDARDS-TRACK]</t></abstract>
</front>
<seriesInfo name='RFC' value='6347'/>
<seriesInfo name='DOI' value='10.17487/RFC6347'/>
</reference>



<reference  anchor="RFC7296" target='https://www.rfc-editor.org/info/rfc7296'>
<front>
<title>Internet Key Exchange Protocol Version 2 (IKEv2)</title>
<author initials='C.' surname='Kaufman' fullname='C. Kaufman'><organization /></author>
<author initials='P.' surname='Hoffman' fullname='P. Hoffman'><organization /></author>
<author initials='Y.' surname='Nir' fullname='Y. Nir'><organization /></author>
<author initials='P.' surname='Eronen' fullname='P. Eronen'><organization /></author>
<author initials='T.' surname='Kivinen' fullname='T. Kivinen'><organization /></author>
<date year='2014' month='October' />
<abstract><t>This document describes version 2 of the Internet Key Exchange (IKE) protocol.  IKE is a component of IPsec used for performing mutual authentication and establishing and maintaining Security Associations (SAs).  This document obsoletes RFC 5996, and includes all of the errata for it.  It advances IKEv2 to be an Internet Standard.</t></abstract>
</front>
<seriesInfo name='STD' value='79'/>
<seriesInfo name='RFC' value='7296'/>
<seriesInfo name='DOI' value='10.17487/RFC7296'/>
</reference>



<reference  anchor="RFC7301" target='https://www.rfc-editor.org/info/rfc7301'>
<front>
<title>Transport Layer Security (TLS) Application-Layer Protocol Negotiation Extension</title>
<author initials='S.' surname='Friedl' fullname='S. Friedl'><organization /></author>
<author initials='A.' surname='Popov' fullname='A. Popov'><organization /></author>
<author initials='A.' surname='Langley' fullname='A. Langley'><organization /></author>
<author initials='E.' surname='Stephan' fullname='E. Stephan'><organization /></author>
<date year='2014' month='July' />
<abstract><t>This document describes a Transport Layer Security (TLS) extension for application-layer protocol negotiation within the TLS handshake. For instances in which multiple application protocols are supported on the same TCP or UDP port, this extension allows the application layer to negotiate which protocol will be used within the TLS connection.</t></abstract>
</front>
<seriesInfo name='RFC' value='7301'/>
<seriesInfo name='DOI' value='10.17487/RFC7301'/>
</reference>



<reference anchor="I-D.ietf-quic-tls">
<front>
<title>Using Transport Layer Security (TLS) to Secure QUIC</title>

<author initials='M' surname='Thomson' fullname='Martin Thomson'>
    <organization />
</author>

<author initials='S' surname='Turner' fullname='Sean Turner'>
    <organization />
</author>

<date month='March' day='4' year='2018' />

<abstract><t>This document describes how Transport Layer Security (TLS) is used to secure QUIC.  Note to Readers  Discussion of this draft takes place on the QUIC working group mailing list (quic@ietf.org), which is archived at https://mailarchive.ietf.org/arch/search/?email_list=quic [1].  Working Group information can be found at https://github.com/quicwg [2]; source code and issues list for this draft can be found at https://github.com/quicwg/base-drafts/labels/-tls [3].</t></abstract>

</front>

<seriesInfo name='Internet-Draft' value='draft-ietf-quic-tls-10' />
<format type='TXT'
        target='http://www.ietf.org/internet-drafts/draft-ietf-quic-tls-10.txt' />
</reference>



<reference anchor="I-D.moskowitz-sse">
<front>
<title>Session Security Envelope</title>

<author initials='R' surname='Moskowitz' fullname='Robert Moskowitz'>
    <organization />
</author>

<author initials='I' surname='Faynberg' fullname='Igor Faynberg'>
    <organization />
</author>

<author initials='H' surname='Lu' fullname='Huilan Lu'>
    <organization />
</author>

<author initials='S' surname='Hares' fullname='Susan Hares'>
    <organization />
</author>

<author initials='P' surname='Giacomin' fullname='Pierpaolo Giacomin'>
    <organization />
</author>

<date month='June' day='27' year='2017' />

<abstract><t>This memo specifies the details of the Session Security Envelope (SSE).  SSE is a session protocol aiming to guarantee confidentiality, integrity and authentication completely independently by the underlying context, namely network and transport layers.  A single session using the SEE protocol can include a single transport session or multiple transport sessions.  This mean that SSE can survive the break-down in network and transport layers or to attacks carried against them.  SSE is also applicable in networks lacking in classic inter-networking and transport protocols SSE relies on modern AEAD block cipher modes of operations, a class of block cipher modes which allows, at the same time, to authenticate the message while encrypting a part of it.</t></abstract>

</front>

<seriesInfo name='Internet-Draft' value='draft-moskowitz-sse-05' />
<format type='TXT'
        target='http://www.ietf.org/internet-drafts/draft-moskowitz-sse-05.txt' />
</reference>



<reference anchor="I-D.mglt-ipsecme-diet-esp">
<front>
<title>ESP Header Compression and Diet-ESP</title>

<author initials='D' surname='Migault' fullname='Daniel Migault'>
    <organization />
</author>

<author initials='T' surname='Guggemos' fullname='Tobias Guggemos'>
    <organization />
</author>

<author initials='C' surname='Bormann' fullname='Carsten Bormann'>
    <organization />
</author>

<date month='October' day='27' year='2017' />

<abstract><t>ESP Header Compression (EHC) defines a flexible framework to compress communications protected with IPsec/ESP.  Compression and decompression is defined by EHC Rules orchestrated by EHC Strategies.  The document specifies the Diet-ESP EHC Strategy and associated EHC Rules.  Diet-ESP compresses up to 32 bytes per packet for traditional IPv6 VPN and up to 66 bytes for IPv6 VPN set over a single TCP or UDP session.</t></abstract>

</front>

<seriesInfo name='Internet-Draft' value='draft-mglt-ipsecme-diet-esp-05' />
<format type='TXT'
        target='http://www.ietf.org/internet-drafts/draft-mglt-ipsecme-diet-esp-05.txt' />
</reference>



<reference anchor="I-D.pauly-taps-arch">
<front>
<title>An Architecture for Transport Services</title>

<author initials='T' surname='Pauly' fullname='Tommy Pauly'>
    <organization />
</author>

<author initials='B' surname='Trammell' fullname='Brian Trammell'>
    <organization />
</author>

<author initials='A' surname='Brunstrom' fullname='Anna Brunstrom'>
    <organization />
</author>

<author initials='G' surname='Fairhurst' fullname='Gorry Fairhurst'>
    <organization />
</author>

<author initials='C' surname='Perkins' fullname='Colin Perkins'>
    <organization />
</author>

<author initials='P' surname='Tiesel' fullname='Philipp Tiesel'>
    <organization />
</author>

<author initials='C' surname='Wood' fullname='Christopher Wood'>
    <organization />
</author>

<date month='February' day='26' year='2018' />

<abstract><t>This document provides an overview of the architecture of Transport Services, a system for exposing the features of transport protocols to applications.  This architecture serves as a basis for Application Programming Interfaces (APIs) and implementations that provide flexible transport networking services.  It defines the common set of terminology and concepts to be used in more detailed discussion of Transport Services.</t></abstract>

</front>

<seriesInfo name='Internet-Draft' value='draft-pauly-taps-arch-00' />
<format type='TXT'
        target='http://www.ietf.org/internet-drafts/draft-pauly-taps-arch-00.txt' />
</reference>




    </references>



  </back>

<!-- ##markdown-source:
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
JvuzN0a7EAzZAr+kaiH+FzIcZFtnSwAA

-->

</rfc>

